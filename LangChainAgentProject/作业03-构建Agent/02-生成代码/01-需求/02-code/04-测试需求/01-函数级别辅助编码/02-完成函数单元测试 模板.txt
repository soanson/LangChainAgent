编写单元测试的详细提示词模板可以帮助你确保大语言模型生成的测试覆盖了所有代码路径，达到100%语句覆盖率。以下是一个详细的提示词模板，适用于为已实现的函数编写单元测试的情况：


### 提示词模板

#### 1. **任务描述**
   - 详细描述你希望大模型完成的任务，例如为一个特定的函数编写单元测试，确保达到100%的语句覆盖。

#### 2. **函数实现**
   - 提供完整的函数实现代码。

#### 3. **测试框架**
   - 指定你希望使用的单元测试框架，例如 `unittest`、`pytest` 等。

#### 4. **测试目标**
   - 明确测试的目标，包括需要覆盖的所有情况和边界条件。

#### 5. **示例**
   - 提供一些具体的输入输出示例，以帮助大模型理解测试需求。

### 示例

以下是一个基于上述模板的具体示例，用于请求为一个计算两个日期之间天数差的函数编写单元测试：

```
1. 任务描述：
   请为以下已实现的函数编写单元测试，确保达到100%的语句覆盖率。

2. 函数实现：
```python
from datetime import datetime

def days_between_dates(start_date, end_date):
    try:
        date_format = "%Y-%m-%d"
        start = datetime.strptime(start_date, date_format)
        end = datetime.strptime(end_date, date_format)
        delta = end - start
        return delta.days
    except ValueError as e:
        return f"Invalid date format: {e}"
```

3. 测试框架：
   请使用 `unittest` 框架编写单元测试。

4. 测试目标：
   - 测试有效的日期输入，确保返回正确的天数差
   - 测试无效的日期输入，确保返回正确的错误信息
   - 测试 `start_date` 晚于 `end_date` 的情况

5. 示例：
   - 输入：("2024-07-01", "2024-07-10")，输出：9
   - 输入：("2024-07-10", "2024-07-01")，输出：-9
   - 输入：("2024-07-01", "2024-13-10")，输出：Invalid date format
```

### 生成的单元测试



#####
以下是一个详细的提示词模板，用于编写单元测试：

提示词模板
1. 任务描述
描述你希望大模型完成的任务，例如编写一个单元测试来测试已经实现的函数。
2. 函数实现
提供已经实现的函数代码。
[

]
3. 测试目标
详细说明测试的目标，包括覆盖所有代码路径和边界情况。
4. 输入场景
列出所有可能的输入场景，包括有效输入、无效输入、边界情况等。
5. 预期输出
对每个输入场景，描述预期的输出结果。
6. 编程语言
明确指定需要使用的编程语言和测试框架（如 Python 的 unittest 或 pytest）。


示例
以下是一个基于上述模板的具体示例，用于请求为一个计算两个日期之间天数差的函数编写单元测试：
1. 任务描述：
   请为已经实现的计算两个日期之间天数差的函数编写单元测试，确保覆盖100%的代码路径。

2. 函数实现：
   ```python
   from datetime import datetime

   def days_between_dates(start_date, end_date):
       try:
           date_format = "%Y-%m-%d"
           start = datetime.strptime(start_date, date_format)
           end = datetime.strptime(end_date, date_format)
           delta = end - start
           return delta.days
       except ValueError as e:
           return f"Invalid date format: {e}"

测试目标：

测试所有可能的代码路径，包括：
有效日期输入
起始日期晚于结束日期
无效日期格式
边界情况
输入场景：

输入：("2024-07-01", "2024-07-10")，预期输出：9
输入：("2024-07-10", "2024-07-01")，预期输出：-9
输入：("2024-07-01", "2024-13-10")，预期输出：Invalid date format
输入：("abcd-ef-gh", "2024-07-10")，预期输出：Invalid date format
输入：("", "2024-07-10")，预期输出：Invalid date format
输入：("2024-07-01", "")，预期输出：Invalid date format
编程语言：
请使用 Python 和 unittest 编写单元测试。



##################
#####
请为以下函数编写单元测试，确保达到100%的语句覆盖：  
  
函数名称：[函数名]  
函数功能：[简要描述函数的功能]  
输入参数：[列出所有输入参数及其类型]  
返回值：[描述函数的返回值及其类型]  
异常处理：[描述函数可能抛出的异常及其条件]  
函数实现
[


]  
提示词：  
1. 编写测试用例，验证函数在正常输入情况下的输出是否与预期相符。  
   - 测试用例1：[具体输入1]，预期输出：[具体输出1]。  
   - 测试用例2：[具体输入2]，预期输出：[具体输出2]。  
   - ...  
  
2. 编写测试用例，验证函数在边界条件下的输出是否与预期相符。  
   - 边界条件1：[具体边界条件1]，预期输出：[具体输出1]。  
   - 边界条件2：[具体边界条件2]，预期输出：[具体输出2]。  
   - ...  
  
3. 编写测试用例，验证函数在非法输入情况下的异常处理是否正确。  
   - 非法输入1：[具体非法输入1]，预期异常：[具体异常1]。  
   - 非法输入2：[具体非法输入2]，预期异常：[具体异常2]。  
   - ...  
  
4. 如果函数包含多个分支逻辑，请确保每个分支都有相应的测试用例。  
   - 分支逻辑1：[描述分支逻辑1]，测试用例：[具体输入]，预期输出：[具体输出]。  
   - 分支逻辑2：[描述分支逻辑2]，测试用例：[具体输入]，预期输出：[具体输出]。  
   - ...  
  
5. 如果函数包含循环结构，请编写测试用例，验证循环的正确性。  
   - 循环测试1：[描述循环测试1]，测试用例：[具体输入]，预期输出：[具体输出]。  
   - 循环测试2：[描述循环测试2]，测试用例：[具体输入]，预期输出：[具体输出]。  
   - ...  
  
6. 如果函数依赖外部资源（如文件、数据库等），请编写测试用例，验证函数在不同资源状态下的行为。  
   - 资源状态1：[描述资源状态1]，测试用例：[具体输入]，预期输出：[具体输出]。  
   - 资源状态2：[描述资源状态2]，测试用例：[具体输入]，预期输出：[具体输出]。  
   - ...  
  
7. 确保所有测试用例都覆盖了函数的每一个语句，以达到100%的语句覆盖。  
  
请根据上述提示词，为[函数名]函数编写详细的单元测试，并确保所有测试用例都通过。

