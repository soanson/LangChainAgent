

需求描述：

该程序有三个输入变量month、day、year（month、day和year均为整数值，并且满足：1≤month≤12和1≤day≤31），分别作为输入日期的月份、日、年份，通过程序可以输出该输出日期在日历上隔一天的日期。假定年2001≤ year ≤2050，（2001年1月1号 到2050年12月31号）

函数描述如下：
String nextDate(int year,int month,int day)
1：输入参数为3个整数，分别代表 年，月，日
2：返回参数为字符串


例如，
1：输入为2014年5月1日，则该程序的输出为2014年5月2日。返回：“2014/5/2”
2：输入为2014年12月31日，则该程序的输出为2014年12月31日。返回：“2015/1/1”

思考：异常输入，完成对参数的校验




作业：

思考提示词如何编写更加实现该功能和异常情况
1：完成该函数的实现 （使用任何一种语言）

你是一位资深Java工程师。输出函数实现代码
###
该程序有三个输入变量month、day、year（month、day和year均为整数值，并且满足：1≤month≤12和1≤day≤31），
分别作为输入日期的月份、日、年份，通过程序可以输出该输出日期在日历上隔一天的日期。假定年2001≤ year ≤2050
（2001年1月1号 到2050年12月31号）

函数描述如下：
String nextDate(int year,int month,int day)
1：输入参数为3个整数，分别代表 年，月，日
2：返回参数为字符串


例如，
1：输入为2014年5月1日，则该程序的输出为2014年5月2日。返回：“2014/5/2”
2：输入为2014年12月31日，则该程序的输出为2014年12月31日。返回：“2015/1/1”

###


2：
请根据给定的函数，设计测试用例。然后输出表格模式。
表格列如下：
序号   测试用例说明/目的   测试输入数据  预期输出

业务需求
###
该程序有三个输入变量month、day、year（month、day和year均为整数值，并且满足：1≤month≤12和1≤day≤31），
分别作为输入日期的月份、日、年份，通过程序可以输出该输出日期在日历上隔一天的日期。假定年2001≤ year ≤2050
（2001年1月1号 到2050年12月31号）

函数描述如下：
String nextDate(int year,int month,int day)
1：输入参数为3个整数，分别代表 年，月，日
2：返回参数为字符串


例如，
1：输入为2014年5月1日，则该程序的输出为2014年5月2日。返回：“2014/5/2”
2：输入为2014年12月31日，则该程序的输出为2014年5月1日。返回：“2015/1/1”
###
测试用例要求：
1. 测试用例应覆盖函数的所有可能的输入情况，包括空输入、非空输入等。
2. 测试用例应包含预期的输出结果，并验证其是否符合函数原型的要求。
3. 测试用例应具有可重复性，以便于后续的性能优化和错误排查。
4. 测试用例应简洁明了，易于理解和执行。


3：完成单元测试 （路径实现全覆盖 100%语句覆盖， 并且考虑各种异常情况）

A：参考提示词：
请为这个函数写一个单元测试，并给出提示词。


你是一位资深Java工程师。请针对以下函数进行编写单元测试，确保它能够正确实现需求。基于Junit5输出代码
需求描述
###
该程序有三个输入变量month、day、year（month、day和year均为整数值，并且满足：1≤month≤12和1≤day≤31），
分别作为输入日期的月份、日、年份，通过程序可以输出该输出日期在日历上隔一天的日期。假定年2001≤ year ≤2050
（2001年1月1号 到2050年12月31号）

函数描述如下：
String nextDate(int year,int month,int day)
1：输入参数为3个整数，分别代表 年，月，日
2：返回参数为字符串


例如，
1：输入为2014年5月1日，则该程序的输出为2014年5月2日。返回：“2014/5/2”
2：输入为2014年12月31日，则该程序的输出为2014年12月31日。返回：“2015/1/1”

###

函数原型：
###
（此处应给出函数的原型，包括输入参数、返回值等）
【


】
###
测试要求：
1. 测试该函数在不同输入参数下的正确性。
2. 测试该函数在返回值方面的正确性。
3. 测试该函数在异常处理方面的正确性。



请确保测试用例清晰、具体，并给出相应的提示词。

