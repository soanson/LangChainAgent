

需求描述：

该程序有三个输入变量month、day、year（month、day和year均为整数值，并且满足：1≤month≤12和1≤day≤31），分别作为输入日期的月份、日、年份，通过程序可以输出该输出日期在日历上隔一天的日期。假定年2001≤ year ≤2050，（2001年1月1号 到2050年12月31号）

函数描述如下：
String nextDate(int year,int month,int day)
1：输入参数为3个整数，分别代表 年，月，日
2：返回参数为字符串


例如，
1：输入为2014年5月1日，则该程序的输出为2014年5月2日。返回：“2014/5/2”
2：输入为2014年12月31日，则该程序的输出为2014年12月31日。返回：“2015/1/1”

思考：异常输入，完成对参数的校验




作业：

思考提示词如何编写更加实现该功能和异常情况
1：完成该函数的实现 （使用任何一种语言）

你是一位资深Java工程师。输出函数实现代码
###
该程序有三个输入变量month、day、year（month、day和year均为整数值，
并且满足：1≤month≤12和1≤day≤31），
分别作为输入日期的月份、日、年份，通过程序可以输出该输出日期在日历上下一天的日期。
假定年2001≤ year ≤2050
（2001年1月1号 到2050年12月31号）

函数描述如下：
String nextDate(int year,int month,int day)
1：输入参数为3个整数，分别代表 年，月，日
2：返回参数为字符串


例如，
1：输入为2014年5月1日，则该程序的输出为2014年5月2日。返回：“2014/5/2”
2：输入为2014年12月31日，则该程序的输出为2014年12月31日。返回：“2015/1/1”

###


2：
请根据业务需求和给定的函数，设计测试用例。然后输出表格模式。
表格列如下：
序号   测试用例说明/目的   测试输入数据  预期输出

业务需求
###
该程序有三个输入变量month、day、year（month、day和year均为整数值，并且满足：1≤month≤12和1≤day≤31），
分别作为输入日期的月份、日、年份，通过程序可以输出该输出日期在日历上隔一天的日期。
假定年2001≤ year ≤2050
（2001年1月1号 到2050年12月31号）

函数描述如下：
String nextDate(int year,int month,int day)
1：输入参数为3个整数，分别代表 年，月，日
2：返回参数为字符串


例如，
1：输入为2014年5月1日，则该程序的输出为2014年5月2日。返回：“2014/5/2”
2：输入为2014年12月31日，则该程序的输出为2014年5月1日。返回：“2015/1/1”
###
函数实现代码
###
public static String nextDate(int year, int month, int day) {
        // 月份中的天数
        int[] daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

        // 检查闰年
        if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {
            daysInMonth[1] = 29;
        }

        // 增加一天
        day++;

        // 检查是否超过当前月份的天数
        if (day > daysInMonth[month - 1]) {
            day = 1;
            month++;
            // 检查月份是否超过12
            if (month > 12) {
                month = 1;
                year++;
            }
        }

        // 返回格式化的日期字符串 "year/month/day"
        return String.format("%d/%d/%d", year, month, day);
    }
###
测试用例要求：
1. 测试用例应覆盖函数的所有可能的输入情况，包括空输入、非空输入等。
2. 测试用例应包含预期的输出结果，并验证其是否符合函数原型的要求。
3. 测试用例应具有可重复性，以便于后续的性能优化和错误排查。
4. 测试用例应简洁明了，易于理解和执行。


3：完成单元测试 （路径实现全覆盖 100%语句覆盖， 并且考虑各种异常情况）

A：参考提示词：
请为这个函数写一个单元测试，并给出提示词。


你是一位资深Java工程师。请针对以下函数进行编写单元测试，确保它能够正确实现需求。基于Junit5输出代码
需求描述
###
该程序有三个输入变量month、day、year（month、day和year均为整数值，并且满足：1≤month≤12和1≤day≤31），
分别作为输入日期的月份、日、年份，通过程序可以输出该输出日期在日历上隔一天的日期。假定年2001≤ year ≤2050
（2001年1月1号 到2050年12月31号）

函数描述如下：
String nextDate(int year,int month,int day)
1：输入参数为3个整数，分别代表 年，月，日
2：返回参数为字符串


例如，
1：输入为2014年5月1日，则该程序的输出为2014年5月2日。返回：“2014/5/2”
2：输入为2014年12月31日，则该程序的输出为2014年12月31日。返回：“2015/1/1”

###

函数原型：
###
（此处应给出函数的原型，包括输入参数、返回值等）
【
public static String nextDate(int year, int month, int day) {
        // 月份中的天数
        int[] daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

        // 检查闰年
        if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {
            daysInMonth[1] = 29;
        }

        // 增加一天
        day++;

        // 检查是否超过当前月份的天数
        if (day > daysInMonth[month - 1]) {
            day = 1;
            month++;
            // 检查月份是否超过12
            if (month > 12) {
                month = 1;
                year++;
            }
        }

        // 返回格式化的日期字符串 "year/month/day"
        return String.format("%d/%d/%d", year, month, day);
    }

】
###
###
1	普通日期增加一天	(2014, 5, 1)	"2014/5/2"
2	月末日期进入下个月	(2014, 5, 31)	"2014/6/1"
3	年末日期进入新的一年	(2014, 12, 31)	"2015/1/1"
4	二月非闰年最后一天	(2019, 2, 28)	"2019/3/1"
5	二月闰年最后一天	(2020, 2, 29)	"2020/3/1"
6	一月的第一天	(2014, 1, 1)	"2014/1/2"
7	一月的最后一天	(2014, 1, 31)	"2014/2/1"
8	十二月的第一天	(2014, 12, 1)	"2014/12/2"
9	三十一日月份（七月）的第一天	(2014, 7, 1)	"2014/7/2"
10	三十日月份（四月）的第一天	(2014, 4, 1)	"2014/4/2"
11	三十一日月份（十二月）的最后一天	(2014, 12, 31)	"2015/1/1"
12	三十日月份（六月）的最后一天	(2014, 6, 30)	"2014/7/1"
13	跨越世纪的年末	(2050, 12, 31)	"2051/1/1"
###
测试要求：
1. 测试该函数在不同输入参数下的正确性。
2. 测试该函数在返回值方面的正确性。
3. 测试该函数在异常处理方面的正确性。



请确保测试用例清晰、具体，并给出相应的提示词。

4：代码审查
你是一位资深java编程专家，负责代码变更的审查工作。需要给出审查建议。
在建议的开始需明确对此代码变更给出「拒绝」或「接受」的决定，
并且以格式「变更评分：实际的分数」给变更打分，分数区间为0~100分。
然后，以精炼的语言、严厉的语气指出存在的问题。如果你觉得必要的情况下，可直接给出修改后的内容。
建议中的语句可以使用emoji结尾。你的反馈内容必须使用严谨的markdown格式。

评审代码主要从以下方面考虑：
1:代码目标：  "这段代码的目标是什么？请帮我检查是否达到了预期的功能和效果。"
2:. 可读性和可维护性：   "请评估代码的可读性和可维护性。是否有任何命名问题、代码结构混乱或缺乏注释的情况？"
3. 错误处理： "请检查代码是否正确处理了可能出现的错误和异常情况。是否有任何潜在的错误漏洞或边界情况未被考虑？"
4. 性能优化： "请评估代码的性能。是否有任何潜在的性能瓶颈或低效的操作？是否有任何优化的机会？"
5. 安全性："请检查代码是否存在任何潜在的安全漏洞或不安全的实践。是否有任何需要加强的安全措施？"
6. 最佳实践： "请评估代码是否符合最佳实践和编码规范。是否有任何不推荐的用法或需要改进的地方？"
7. 代码重复："请评估代码是否存在重复的部分。是否有任何机会将重复的代码提取为可重用的函数或模块？"
8. 总结和建议："请总结你对代码的整体评价，并提供任何改进的建议或建议的下一步行动。"
需要评审的代码
###
函数原型：
###
（此处应给出函数的原型，包括输入参数、返回值等）
【
public static String nextDate(int year, int month, int day) {
        // 月份中的天数
        int[] daysInMonth = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

        // 检查闰年
        if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {
            daysInMonth[1] = 29;
        }

        // 增加一天
        day++;

        // 检查是否超过当前月份的天数
        if (day > daysInMonth[month - 1]) {
            day = 1;
            month++;
            // 检查月份是否超过12
            if (month > 12) {
                month = 1;
                year++;
            }
        }

        // 返回格式化的日期字符串 "year/month/day"
        return String.format("%d/%d/%d", year, month, day);
    }

】
###
参考业务需求
###
该程序有三个输入变量month、day、year（month、day和year均为整数值，并且满足：1≤month≤12和1≤day≤31），
分别作为输入日期的月份、日、年份，通过程序可以输出该输出日期在日历上隔一天的日期。假定年2001≤ year ≤2050
（2001年1月1号 到2050年12月31号）

函数描述如下：
String nextDate(int year,int month,int day)
1：输入参数为3个整数，分别代表 年，月，日
2：返回参数为字符串


例如，
1：输入为2014年5月1日，则该程序的输出为2014年5月2日。返回：“2014/5/2”
2：输入为2014年12月31日，则该程序的输出为2014年12月31日。返回：“2015/1/1”

###


5: