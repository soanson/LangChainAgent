

https://leetcode.cn/problems/design-parking-system/description/

1603. 设计停车系统

请你给一个停车场设计一个停车系统。停车场总共有三种不同大小的车位：大，中和小，每种尺寸分别有固定数目的车位。

请你实现 ParkingSystem 类：

ParkingSystem(int big, int medium, int small) 初始化 ParkingSystem 类，三个参数分别对应每种停车位的数目。
bool addCar(int carType) 检查是否有 carType 对应的停车位。 carType 有三种类型：大，中，小，分别用数字 1， 2 和 3 表示。
一辆车只能停在  carType 对应尺寸的停车位中。如果没有空车位，请返回 false ，否则将该车停入车位并返回 true 。
 

示例 1：

输入：
["ParkingSystem", "addCar", "addCar", "addCar", "addCar"]
[[1, 1, 0], [1], [2], [3], [1]]
输出：
[null, true, true, false, false]

解释：
ParkingSystem parkingSystem = new ParkingSystem(1, 1, 0);
parkingSystem.addCar(1); // 返回 true ，因为有 1 个空的大车位
parkingSystem.addCar(2); // 返回 true ，因为有 1 个空的中车位
parkingSystem.addCar(3); // 返回 false ，因为没有空的小车位
parkingSystem.addCar(1); // 返回 false ，因为没有空的大车位，唯一一个大车位已经被占据了
 

提示：

0 <= big, medium, small <= 1000
carType 取值为 1， 2 或 3
最多会调用 addCar 函数 1000 次


public class ParkingSystem {

    public ParkingSystem(int big, int medium, int small) {

    }
    
    public boolean addCar(int carType) {

    }
}

/**
 * Your ParkingSystem object will be instantiated and called as such:
 * ParkingSystem obj = new ParkingSystem(big, medium, small);
 * boolean param_1 = obj.addCar(carType);
 */


你是一位资深java开发工程师，请根据以下需求完成类的实现。
###
类结构如下：
public class ParkingSystem {

    public ParkingSystem(int big, int medium, int small) {

    }
    
    public boolean addCar(int carType) {

    }
}

类名称：ParkingSystem (请提供一个简洁且描述性的类名称。)
 
类目的：
请你给一个停车场设计一个停车系统。停车场总共有三种不同大小的车位：大，中和小，每种尺寸分别有固定数目的车位。

实现 ParkingSystem 类：
ParkingSystem(int big, int medium, int small) 初始化 ParkingSystem 类，三个参数分别对应每种停车位的数目。

bool addCar(int carType) 检查是否有 carType 对应的停车位。 carType 有三种类型：大，中，小，分别用数字 1， 2 和 3 表示。
一辆车只能停在  carType 对应尺寸的停车位中。如果没有空车位，请返回 false ，否则将该车停入车位并返回 true 。
 
属性列表：
carType 有三种类型：大，中，小，分别用数字 1， 2 和 3 表示
int big, int medium, int small

方法列表：
  public boolean addCar(int carType) {


构造函数：
 public ParkingSystem(int big, int medium, int small)
 请对构造函数进行参数检查，确保参数大于0。如果参数小于0，请编写相应的错误处理逻辑，例如抛出异常
继承关系：
无

接口实现：
无

异常处理：
列出类中可能抛出的异常或错误情况。
说明如何处理这些情况，包括是否捕获异常、是否向调用者传播等。

附加说明：
0 <= big, medium, small <= 1000
carType 取值为 1， 2 或 3
最多会调用 addCar 函数 1000 次

使用示例：
提供一个简单的示例，展示如何创建类的实例、调用其方法，并处理返回值。
ParkingSystem parkingSystem = new ParkingSystem(1, 1, 0);
parkingSystem.addCar(1); // 返回 true ，因为有 1 个空的大车位
parkingSystem.addCar(2); // 返回 true ，因为有 1 个空的中车位
parkingSystem.addCar(3); // 返回 false ，因为没有空的小车位
parkingSystem.addCar(1); // 返回 false ，因为没有空的大车位，唯一一个大车位已经被占据了
### 

请对构造函数进行参数检查，确保参数大于0。如果参数小于0，请编写相应的错误处理逻辑，例如抛出异常。

要求：
1. 在构造函数中增加参数检查，确保参数大于0。
2. 如果参数小于0，请编写相应的错误处理逻辑，例如抛出异常。
3. 确保代码的可读性和可维护性，并遵循最佳实践。

注意：请确保你的代码能够正确运行，并且不会引入任何错误或问题。

public class ParkingSystem {  
    private int big;  
    private int medium;  
    private int small;  
  
    public ParkingSystem(int big, int medium, int small) {  
        this.big = big;  
        this.medium = medium;  
        this.small = small;  
    }  
      
    public boolean addCar(int carType) {  
        switch (carType) {  
            case 1: // 大车  
                if (big > 0) {  
                    big--;  
                    return true;  
                }  
                break;  
            case 2: // 中车  
                if (medium > 0) {  
                    medium--;  
                    return true;  
                }  
                break;  
            case 3: // 小车  
                if (small > 0) {  
                    small--;  
                    return true;  
                }  
                break;  
        }  
        return false;  
    }  
  
    // 主函数，用于测试  
    public static void main(String[] args) {  
        ParkingSystem parkingSystem = new ParkingSystem(1, 1, 0);  
        System.out.println(parkingSystem.addCar(1)); // 返回 true  
        System.out.println(parkingSystem.addCar(2)); // 返回 true  
        System.out.println(parkingSystem.addCar(3)); // 返回 false  
        System.out.println(parkingSystem.addCar(1)); // 返回 false  
    }  
}













你是一位资深测试工程师，非常擅长设计测试用例。，请根据需求设计测试用例，希望尽可能的不重复，最多发现问题。
并且覆盖各种正常和异常情况。考虑到测试的各种异常情况，重点关注边界值。
根据以下需求，然后输出测试用例, 请一定使用表格形式输出。

###
类结构如下：
public class ParkingSystem {

    public ParkingSystem(int big, int medium, int small) {

    }
    
    public boolean addCar(int carType) {

    }
}

类名称：ParkingSystem (请提供一个简洁且描述性的类名称。)
 
类目的：
请你给一个停车场设计一个停车系统。停车场总共有三种不同大小的车位：大，中和小，每种尺寸分别有固定数目的车位。

实现 ParkingSystem 类：
ParkingSystem(int big, int medium, int small) 初始化 ParkingSystem 类，三个参数分别对应每种停车位的数目。

bool addCar(int carType) 检查是否有 carType 对应的停车位。 carType 有三种类型：大，中，小，分别用数字 1， 2 和 3 表示。
一辆车只能停在  carType 对应尺寸的停车位中。如果没有空车位，请返回 false ，否则将该车停入车位并返回 true 。
 
异常处理：
列出类中可能抛出的异常或错误情况。
说明如何处理这些情况，包括是否捕获异常、是否向调用者传播等。

附加说明：
0 <= big, medium, small <= 1000
carType 取值为 1， 2 或 3
最多会调用 addCar 函数 1000 次

使用示例：
提供一个简单的示例，展示如何创建类的实例、调用其方法，并处理返回值。
ParkingSystem parkingSystem = new ParkingSystem(1, 1, 0);
parkingSystem.addCar(1); // 返回 true ，因为有 1 个空的大车位
parkingSystem.addCar(2); // 返回 true ，因为有 1 个空的中车位
parkingSystem.addCar(3); // 返回 false ，因为没有空的小车位
parkingSystem.addCar(1); // 返回 false ，因为没有空的大车位，唯一一个大车位已经被占据了

###

以下是根据需求设计的测试用例表格：

测试用例编号	参数 (big, medium, small)	调用序列		预期结果	备注
1		(1, 1, 1)			1, 2, 3		true, true, true	正常情况下，每种车位都有空位
2		(0, 0, 0)			1, 2, 3		false, false, false	所有车位都没有空位
3		(2, 2, 2)			1, 1, 2, 2, 3, 3	true, true, true, true, true, true	每种车位都有足够的空位
4		(1, 0, 0)			1, 2, 3		true, false, false	只有大车位有空位
5	(1000, 1000, 1000)	1(x1000), 2(x1000), 3(x1000)	true(x1000), true(x1000), true(x1000)	所有车位都有足够的空位，调用1000次
6	(1, 1, 1)	1, 1, 2	true, false, true	大车位已满，中车位有空位
7	(500, 500, 500)	1(x500), 2(x500), 3(x501)	true(x500), true(x500), false	小车位在第501次调用时没有空位
8	(0, 1, 1)	2, 1, 3	true, false, true	只有中车位和小车位有空位
9	(1, 1, 1)	4	false	无效的车位类型
10	(-1, 1, 1)	1	false	无效的车位数量（负数）
11	(1001, 1, 1)	1	false	无效的车位数量（超过1000）
12	(1, 1, 1)	1, 2, 1, 3, 2, 3, 1	true, true, false, true, false, true, false	综合测试，验证车位状态变化

备注：

测试用例编号9用于测试无效的车位类型（carType不为1、2、3）。
测试用例编号10和11用于测试无效的车位数量（不在0到1000的范围内）。
测试用例编号12是一个综合测试，用于验证在多次调用addCar函数后车位状态的变化。

