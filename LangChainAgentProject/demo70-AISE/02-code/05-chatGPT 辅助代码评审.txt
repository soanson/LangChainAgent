

1：
你是一位资深java编程专家，负责代码变更的审查工作。请你介绍chatGPT怎样帮助程序员做代码评审？

你是一位资深java编程专家，负责代码变更的审查工作。请你介绍chatGPT帮助程序员做代码评审时，请输出高质量的提示词prompt模板。
  这样方便程序员做代码评审。

2:
你是一位资深java编程专家，负责代码变更的审查工作。需要给出审查建议。
在建议的开始需明确对此代码变更给出「拒绝」或「接受」的决定，
并且以格式「变更评分：实际的分数」给变更打分，分数区间为0~100分。
然后，以精炼的语言、严厉的语气指出存在的问题。如果你觉得必要的情况下，可直接给出修改后的内容。
建议中的语句可以使用emoji结尾。你的反馈内容必须使用严谨的markdown格式。
需要评审的代码
"""
public void roll(int roll) {
		System.out.println(players.get(currentPlayer) + " is the current player");
		System.out.println("They have rolled a " + roll);
		
		if (inPenaltyBox[currentPlayer]) {
			if (roll % 2 != 0) {
				isGettingOutOfPenaltyBox = true;
				
				System.out.println(players.get(currentPlayer) + " is getting out of the penalty box");
				places[currentPlayer] = places[currentPlayer] + roll;
				if (places[currentPlayer] > 11) places[currentPlayer] = places[currentPlayer] - 12;
				
				System.out.println(players.get(currentPlayer) 
						+ "'s new location is " 
						+ places[currentPlayer]);
				System.out.println("The category is " + currentCategory());
				askQuestion();
			} else {
				System.out.println(players.get(currentPlayer) + " is not getting out of the penalty box");
				isGettingOutOfPenaltyBox = false;
				}
			
		} else {
		
			places[currentPlayer] = places[currentPlayer] + roll;
			if (places[currentPlayer] > 11) places[currentPlayer] = places[currentPlayer] - 12;
			
			System.out.println(players.get(currentPlayer) 
					+ "'s new location is " 
					+ places[currentPlayer]);
			System.out.println("The category is " + currentCategory());
			askQuestion();
		}
		
	}
"""

3:
你是一位资深java编程专家，负责代码变更的审查工作。需要给出审查建议。
在建议的开始需明确对此代码变更给出「拒绝」或「接受」的决定，
并且以格式「变更评分：实际的分数」给变更打分，分数区间为0~100分。
然后，以精炼的语言、严厉的语气指出存在的问题。如果你觉得必要的情况下，可直接给出修改后的内容。
建议中的语句可以使用emoji结尾。你的反馈内容必须使用严谨的markdown格式。
评审代码主要从以下方面考虑：
1:代码目标：  "这段代码的目标是什么？请帮我检查是否达到了预期的功能和效果。"
2:. 可读性和可维护性：   "请评估代码的可读性和可维护性。是否有任何命名问题、代码结构混乱或缺乏注释的情况？"
3. 错误处理： "请检查代码是否正确处理了可能出现的错误和异常情况。是否有任何潜在的错误漏洞或边界情况未被考虑？"
4. 性能优化： "请评估代码的性能。是否有任何潜在的性能瓶颈或低效的操作？是否有任何优化的机会？"
5. 安全性："请检查代码是否存在任何潜在的安全漏洞或不安全的实践。是否有任何需要加强的安全措施？"
6. 最佳实践： "请评估代码是否符合最佳实践和编码规范。是否有任何不推荐的用法或需要改进的地方？"
7. 代码重复："请评估代码是否存在重复的部分。是否有任何机会将重复的代码提取为可重用的函数或模块？"
8. 总结和建议："请总结你对代码的整体评价，并提供任何改进的建议或建议的下一步行动。"
需要评审的代码
"""
public void roll(int roll) {
		System.out.println(players.get(currentPlayer) + " is the current player");
		System.out.println("They have rolled a " + roll);
		
		if (inPenaltyBox[currentPlayer]) {
			if (roll % 2 != 0) {
				isGettingOutOfPenaltyBox = true;
				
				System.out.println(players.get(currentPlayer) + " is getting out of the penalty box");
				places[currentPlayer] = places[currentPlayer] + roll;
				if (places[currentPlayer] > 11) places[currentPlayer] = places[currentPlayer] - 12;
				
				System.out.println(players.get(currentPlayer) 
						+ "'s new location is " 
						+ places[currentPlayer]);
				System.out.println("The category is " + currentCategory());
				askQuestion();
			} else {
				System.out.println(players.get(currentPlayer) + " is not getting out of the penalty box");
				isGettingOutOfPenaltyBox = false;
				}
			
		} else {
		
			places[currentPlayer] = places[currentPlayer] + roll;
			if (places[currentPlayer] > 11) places[currentPlayer] = places[currentPlayer] - 12;
			
			System.out.println(players.get(currentPlayer) 
					+ "'s new location is " 
					+ places[currentPlayer]);
			System.out.println("The category is " + currentCategory());
			askQuestion();
		}
		
	}
"""

4：
你是一个天才小女孩，精通java编程工作，性格很傲娇又高傲，负责对前辈的代码变更进行审查，
用后辈的态度、活泼轻快的方式的指出存在的问题。使用markdown格式。可以包含emoji。
需要评审的代码
"""
public void roll(int roll) {
		System.out.println(players.get(currentPlayer) + " is the current player");
		System.out.println("They have rolled a " + roll);
		
		if (inPenaltyBox[currentPlayer]) {
			if (roll % 2 != 0) {
				isGettingOutOfPenaltyBox = true;
				
				System.out.println(players.get(currentPlayer) + " is getting out of the penalty box");
				places[currentPlayer] = places[currentPlayer] + roll;
				if (places[currentPlayer] > 11) places[currentPlayer] = places[currentPlayer] - 12;
				
				System.out.println(players.get(currentPlayer) 
						+ "'s new location is " 
						+ places[currentPlayer]);
				System.out.println("The category is " + currentCategory());
				askQuestion();
			} else {
				System.out.println(players.get(currentPlayer) + " is not getting out of the penalty box");
				isGettingOutOfPenaltyBox = false;
				}
			
		} else {
		
			places[currentPlayer] = places[currentPlayer] + roll;
			if (places[currentPlayer] > 11) places[currentPlayer] = places[currentPlayer] - 12;
			
			System.out.println(players.get(currentPlayer) 
					+ "'s new location is " 
					+ places[currentPlayer]);
			System.out.println("The category is " + currentCategory());
			askQuestion();
		}
		
	}
"""

你知道中国的相声演员 郭德纲吗？ 他说话的语气方式怎样？ 你可以模仿他说一段相声吗？

5：
你是一位资深java编程专家，负责代码变更的审查工作。需要给出审查建议。
在建议的开始需明确对此代码变更给出「拒绝」或「接受」的决定，
并且以格式「变更评分：实际的分数」给变更打分，分数区间为0~100分。
然后，以精炼的语言、严厉的语气指出存在的问题。如果你觉得必要的情况下，可直接给出修改后的内容。
建议使用中国的相声演员 郭德纲的语言风格。郭德纲说话的语气方式非常独特，带有浓厚的京味儿，语速适中，抑扬顿挫掌握得恰到好处，能很好地引导听众的情绪。他擅长运用各种语言技巧，如夸张、对比、双关等，营造出轻松幽默的氛围。
你的反馈内容必须使用严谨的markdown格式。
评审代码主要从以下方面考虑：
1:代码目标：  "这段代码的目标是什么？请帮我检查是否达到了预期的功能和效果。"
2:. 可读性和可维护性：   "请评估代码的可读性和可维护性。是否有任何命名问题、代码结构混乱或缺乏注释的情况？"
3. 错误处理： "请检查代码是否正确处理了可能出现的错误和异常情况。是否有任何潜在的错误漏洞或边界情况未被考虑？"
4. 性能优化： "请评估代码的性能。是否有任何潜在的性能瓶颈或低效的操作？是否有任何优化的机会？"
5. 安全性："请检查代码是否存在任何潜在的安全漏洞或不安全的实践。是否有任何需要加强的安全措施？"
6. 最佳实践： "请评估代码是否符合最佳实践和编码规范。是否有任何不推荐的用法或需要改进的地方？"
7. 代码重复："请评估代码是否存在重复的部分。是否有任何机会将重复的代码提取为可重用的函数或模块？"
8. 总结和建议："请总结你对代码的整体评价，并提供任何改进的建议或建议的下一步行动。"
需要评审的代码
"""
public void roll(int roll) {
		System.out.println(players.get(currentPlayer) + " is the current player");
		System.out.println("They have rolled a " + roll);
		
		if (inPenaltyBox[currentPlayer]) {
			if (roll % 2 != 0) {
				isGettingOutOfPenaltyBox = true;
				
				System.out.println(players.get(currentPlayer) + " is getting out of the penalty box");
				places[currentPlayer] = places[currentPlayer] + roll;
				if (places[currentPlayer] > 11) places[currentPlayer] = places[currentPlayer] - 12;
				
				System.out.println(players.get(currentPlayer) 
						+ "'s new location is " 
						+ places[currentPlayer]);
				System.out.println("The category is " + currentCategory());
				askQuestion();
			} else {
				System.out.println(players.get(currentPlayer) + " is not getting out of the penalty box");
				isGettingOutOfPenaltyBox = false;
				}
			
		} else {
		
			places[currentPlayer] = places[currentPlayer] + roll;
			if (places[currentPlayer] > 11) places[currentPlayer] = places[currentPlayer] - 12;
			
			System.out.println(players.get(currentPlayer) 
					+ "'s new location is " 
					+ places[currentPlayer]);
			System.out.println("The category is " + currentCategory());
			askQuestion();
		}
		
	}
"""

你知道中国舞蹈家、脱口秀主持人，内娱第一毒舌”金星吗？ 他说话的语气方式怎样？ 你可以模仿他做一段点评吗？
6：

你是一位资深java编程专家，负责代码变更的审查工作。需要给出审查建议。
在建议的开始需明确对此代码变更给出「拒绝」或「接受」的决定，
并且以格式「变更评分：实际的分数」给变更打分，分数区间为0~100分。

建议使用中国舞蹈家、脱口秀主持人，内娱第一毒舌”金星的语言风格。
金星是中国知名的舞蹈家和脱口秀主持人，被誉为“内娱第一毒舌”。
他的语气方式非常独特，以尖锐、直接、幽默的口吻来点评事物，常常带有一些讽刺和挖苦的成分。
然后，以金星语气指出存在的问题。如果你觉得必要的情况下，可直接给出修改后的内容。

你的反馈内容必须使用严谨的markdown格式。

评审代码主要从以下方面考虑：
1:代码目标：  "这段代码的目标是什么？请帮我检查是否达到了预期的功能和效果。"
2:. 可读性和可维护性：   "请评估代码的可读性和可维护性。是否有任何命名问题、代码结构混乱或缺乏注释的情况？"
3. 错误处理： "请检查代码是否正确处理了可能出现的错误和异常情况。是否有任何潜在的错误漏洞或边界情况未被考虑？"
4. 性能优化： "请评估代码的性能。是否有任何潜在的性能瓶颈或低效的操作？是否有任何优化的机会？"
5. 安全性："请检查代码是否存在任何潜在的安全漏洞或不安全的实践。是否有任何需要加强的安全措施？"
6. 最佳实践： "请评估代码是否符合最佳实践和编码规范。是否有任何不推荐的用法或需要改进的地方？"
7. 代码重复："请评估代码是否存在重复的部分。是否有任何机会将重复的代码提取为可重用的函数或模块？"
8. 总结和建议："请总结你对代码的整体评价，并提供任何改进的建议或建议的下一步行动。"

需要评审的代码
"""
public void roll(int roll) {
		System.out.println(players.get(currentPlayer) + " is the current player");
		System.out.println("They have rolled a " + roll);
		
		if (inPenaltyBox[currentPlayer]) {
			if (roll % 2 != 0) {
				isGettingOutOfPenaltyBox = true;
				
				System.out.println(players.get(currentPlayer) + " is getting out of the penalty box");
				places[currentPlayer] = places[currentPlayer] + roll;
				if (places[currentPlayer] > 11) places[currentPlayer] = places[currentPlayer] - 12;
				
				System.out.println(players.get(currentPlayer) 
						+ "'s new location is " 
						+ places[currentPlayer]);
				System.out.println("The category is " + currentCategory());
				askQuestion();
			} else {
				System.out.println(players.get(currentPlayer) + " is not getting out of the penalty box");
				isGettingOutOfPenaltyBox = false;
				}
			
		} else {
		
			places[currentPlayer] = places[currentPlayer] + roll;
			if (places[currentPlayer] > 11) places[currentPlayer] = places[currentPlayer] - 12;
			
			System.out.println(players.get(currentPlayer) 
					+ "'s new location is " 
					+ places[currentPlayer]);
			System.out.println("The category is " + currentCategory());
			askQuestion();
		}
		
	}
"""

7：
请在保持原有代码逻辑的情况下优化下以下代码，尽可能提升代码的可读性、可维护性、性能，并给出优化的理由。

请对以下代码进行CodeReview，指出代码中可能存在的问题，包括但不仅限于代码风格、潜在bug、性能问题、代码可读性、代码安全性等问题。
需要评审的代码
"""
public void roll(int roll) {
		System.out.println(players.get(currentPlayer) + " is the current player");
		System.out.println("They have rolled a " + roll);
		
		if (inPenaltyBox[currentPlayer]) {
			if (roll % 2 != 0) {
				isGettingOutOfPenaltyBox = true;
				
				System.out.println(players.get(currentPlayer) + " is getting out of the penalty box");
				places[currentPlayer] = places[currentPlayer] + roll;
				if (places[currentPlayer] > 11) places[currentPlayer] = places[currentPlayer] - 12;
				
				System.out.println(players.get(currentPlayer) 
						+ "'s new location is " 
						+ places[currentPlayer]);
				System.out.println("The category is " + currentCategory());
				askQuestion();
			} else {
				System.out.println(players.get(currentPlayer) + " is not getting out of the penalty box");
				isGettingOutOfPenaltyBox = false;
				}
			
		} else {
		
			places[currentPlayer] = places[currentPlayer] + roll;
			if (places[currentPlayer] > 11) places[currentPlayer] = places[currentPlayer] - 12;
			
			System.out.println(players.get(currentPlayer) 
					+ "'s new location is " 
					+ places[currentPlayer]);
			System.out.println("The category is " + currentCategory());
			askQuestion();
		}
		
	}
"""