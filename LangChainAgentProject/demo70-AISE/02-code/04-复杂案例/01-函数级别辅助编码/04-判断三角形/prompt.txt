
程序从输入对话框中读取三个整数。
这三个整数值代表了三角形三个边的长度。
程序显示提示信息，指出该三角形究竟是不规则三角形，等腰三角形还是等边三角形。

int comfirm(int a, int b, int c)
  1. 如果三个整数不能构成三角形，返回为 0 ，表示非三角形；。
  2. 如果三个整数构成等边三角形，返回为 3 ，表示等边三角形
  3. 如果三个整数构成等腰三角形，返回为 2 ，表示等腰三角形；
  4. 如果三个整数构成普通三角形，返回为 1，表示普通三角形；


完成提示词：


你是一名资深【Java开发工程师】。请使用【Java语言】完成以下功能：

int comfirm(int a, int b, int c)
函数输入三个整数值代表了三角形三个边的长度。
函数返回值，表示该三角形究竟是不规则三角形，等腰三角形还是等边三角形。
  1. 如果三个整数不能构成三角形，返回为 0 ，表示非三角形；。
  2. 如果三个整数构成等边三角形，返回为 3 ，表示等边三角形
  3. 如果三个整数构成等腰三角形，返回为 2 ，表示等腰三角形；
  4. 如果三个整数构成普通三角形，返回为 1，表示普通三角形；

请确保你的代码能够正确实现上述功能，并考虑性能优化和错误处理，以及各种边界情况。
特别注意输入参数的检查。


代码输出：


你是一位资深测试工程师，非常擅长设计测试用例。，请根据需求设计测试用例，希望尽可能的不重复，并且覆盖各种正常和异常情况。考虑到测试的各种异常经常，重点关注边界值。
根据以下需求，然后输出测试用例, 请一定使用表格形式输出。
###
int comfirm(int a, int b, int c)
函数输入三个整数值代表了三角形三个边的长度。
函数返回值，表示该三角形究竟是不规则三角形，等腰三角形还是等边三角形。
  1. 如果三个整数不能构成三角形，返回为 0 ，表示非三角形；。
  2. 如果三个整数构成等边三角形，返回为 3 ，表示等边三角形
  3. 如果三个整数构成等腰三角形，返回为 2 ，表示等腰三角形；
  4. 如果三个整数构成普通三角形，返回为 1，表示普通三角形；

请确保你的代码能够正确实现上述功能，并考虑性能优化和错误处理，以及各种边界情况。
特别注意输入参数的检查。
###

以下是根据给定需求设计的测试用例表格：

测试用例编号	a	b	c	预期结果	备注
1		3	4	5	1	正常三角形
2		5	5	3	2	等腰三角形
3		5	5	5	3	等边三角形
4		1	2	3	0	非三角形，不满足三角形条件
5		0	5	5	异常	输入参数检查，边长不能为0
6		-1	5	5	异常	输入参数检查，边长不能为负数
7		2147483647	2147483647	2147483647	1	边界值，int最大值
8		1	1	2147483647	0	边界值，int最大值与最小值组合，不满足三角形条件
9		5	5	10	1	正常三角形，检查等边和等腰之外的普通三角形
10		10	1	1	0	非三角形，不满足三角形条件
11		2	2	2	3	等边三角形，边界值，检查最小等边三角形

这些测试用例涵盖了正常情况和各种异常情况，包括边界值和非法输入。通过这些测试用例，可以确保confirm函数在各种情况下都能正确工作。



完成单元测试

请是一位java开发工程师，请根据给定的函数，和对应的设计测试用例。生成单元测试代码
###
函数原型：{{

public class TriangleType {  
  
    public static int confirm(int a, int b, int c) {  
        // 首先检查输入是否合法  
        if (a <= 0 || b <= 0 || c <= 0) {  
            throw new IllegalArgumentException("边长必须大于0");  
        }  
  
        // 检查是否能构成三角形  
        if (a + b <= c || a + c <= b || b + c <= a) {  
            return 0; // 非三角形  
        }  
  
        // 检查是否为等边三角形  
        if (a == b && b == c) {  
            return 3; // 等边三角形  
        }  
  
        // 检查是否为等腰三角形  
        if (a == b || a == c || b == c) {  
            return 2; // 等腰三角形  
        }  
  
        // 剩下的情况就是普通三角形  
        return 1; // 普通三角形  
    }  
    
}
}}

对应的设计测试用例：
以下是根据给定需求设计的测试用例表格：

测试用例编号	a	b	c	预期结果	备注
1		3	4	5	1	正常三角形
2		5	5	3	2	等腰三角形
3		5	5	5	3	等边三角形
4		1	2	3	0	非三角形，不满足三角形条件
5		0	5	5	异常	输入参数检查，边长不能为0
6		-1	5	5	异常	输入参数检查，边长不能为负数
7		2147483647	2147483647	2147483647	1	边界值，int最大值
8		1	1	2147483647	0	边界值，int最大值与最小值组合，不满足三角形条件
9		5	5	10	1	正常三角形，检查等边和等腰之外的普通三角形
10		10	1	1	0	非三角形，不满足三角形条件
11		2	2	2	3	等边三角形，边界值，检查最小等边三角形


这些测试用例涵盖了有效的日期、边界日期、无效的日期、非法输入（包括null、空字符串、仅包含空格的字符串）以及不同长度的输入，确保了代码的健壮性和全面性。
###
要求：
1. 测试用例应覆盖函数的所有可能的输入情况，包括空输入、非空输入等。
2. 测试用例应包含预期的输出结果，并验证其是否符合函数原型的要求。
3. 测试用例应具有可重复性，以便于后续的性能优化和错误排查。
4. 测试用例应简洁明了，易于理解和执行。




import static org.junit.Assert.assertEquals;  
import static org.junit.Assert.assertThrows;  
  
import org.junit.Test;  
  
public class TriangleTypeTest {  
  
    @Test  
    public void testConfirm_NormalTriangle() {  
        assertEquals(1, TriangleType.confirm(3, 4, 5));  
    }  
  
    @Test  
    public void testConfirm_IsoscelesTriangle() {  
        assertEquals(2, TriangleType.confirm(5, 5, 3));  
    }  
  
    @Test  
    public void testConfirm_EquilateralTriangle() {  
        assertEquals(3, TriangleType.confirm(5, 5, 5));  
    }  
  
    @Test  
    public void testConfirm_NotTriangle() {  
        assertEquals(0, TriangleType.confirm(1, 2, 3));  
    }  
  
    @Test  
    public void testConfirm_InvalidInputZero() {  
        assertThrows(IllegalArgumentException.class, () -> {  
            TriangleType.confirm(0, 5, 5);  
        });  
    }  
  
    @Test  
    public void testConfirm_InvalidInputNegative() {  
        assertThrows(IllegalArgumentException.class, () -> {  
            TriangleType.confirm(-1, 5, 5);  
        });  
    }  
  
    @Test  
    public void testConfirm_MaxValue() {  
        assertEquals(1, TriangleType.confirm(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE));  
    }  
  
    @Test  
    public void testConfirm_MaxValueAndMinValue() {  
        assertEquals(0, TriangleType.confirm(1, 1, Integer.MAX_VALUE));  
    }  
  
    @Test  
    public void testConfirm_NormalTriangleOtherCase() {  
        assertEquals(1, TriangleType.confirm(5, 5, 10));  
    }  
  
    @Test  
    public void testConfirm_NotTriangleOtherCase() {  
        assertEquals(0, TriangleType.confirm(10, 1, 1));  
    }  
  
    @Test  
    public void testConfirm_EquilateralTriangleMinValue() {  
        assertEquals(3, TriangleType.confirm(2, 2, 2));  
    }  
}


