

https://leetcode.cn/problems/design-parking-system/description/

1603. 设计停车系统

请你给一个停车场设计一个停车系统。停车场总共有三种不同大小的车位：大，中和小，每种尺寸分别有固定数目的车位。

请你实现 ParkingSystem 类：

ParkingSystem(int big, int medium, int small) 初始化 ParkingSystem 类，三个参数分别对应每种停车位的数目。
bool addCar(int carType) 检查是否有 carType 对应的停车位。 carType 有三种类型：大，中，小，分别用数字 1， 2 和 3 表示。
一辆车只能停在  carType 对应尺寸的停车位中。如果没有空车位，请返回 false ，否则将该车停入车位并返回 true 。
 

示例 1：

输入：
["ParkingSystem", "addCar", "addCar", "addCar", "addCar"]
[[1, 1, 0], [1], [2], [3], [1]]
输出：
[null, true, true, false, false]

解释：
ParkingSystem parkingSystem = new ParkingSystem(1, 1, 0);
parkingSystem.addCar(1); // 返回 true ，因为有 1 个空的大车位
parkingSystem.addCar(2); // 返回 true ，因为有 1 个空的中车位
parkingSystem.addCar(3); // 返回 false ，因为没有空的小车位
parkingSystem.addCar(1); // 返回 false ，因为没有空的大车位，唯一一个大车位已经被占据了
 

提示：
0 <= big, medium, small <= 1000
carType 取值为 1， 2 或 3
最多会调用 addCar 函数 1000 次


class ParkingSystem {

    public ParkingSystem(int big, int medium, int small) {

    }
    
    public boolean addCar(int carType) {

    }
}

/**
 * Your ParkingSystem object will be instantiated and called as such:
 * ParkingSystem obj = new ParkingSystem(big, medium, small);
 * boolean param_1 = obj.addCar(carType);
 */


作业
1：实现类
  重点考虑各种异常情况

2：完成测试用例的设计
  各种场景的考虑

3：完成单元测试验证生成代码


4 : 需求变更。
  A：增加一个方法，removeCar从停车场开出一种已停的车辆。如果停车场有对应的车辆，开出后成功返回true，如果没有对应车辆否则返回false
       carType 有三种类型：大，中，小，分别用数字 1， 2 和 3 表示。
   public boolean removeCar(int carType) {

    }

B：增加一个统计方法，计算当前停车场全部停车的汽车数量。 计算当前3种车辆的总数量。
  public int getNumberOfCars(  ) {

    }

C：增加一个统计方法，计算当前停车场空余车位的数量。 计算当前3种空闲车位的总数量。
  public int getNumberOfParkingSpaces(  ) {

    }

6：增加单元测试，验证新增方法的正确性  各种场景的考虑

7：完成单元测试验证生成代码

8：完成代码评审


